// Constraint expression for cpu/decode/opcode_rc/bit: cpu__decode__opcode_rc__bit_0 * cpu__decode__opcode_rc__bit_0 - cpu__decode__opcode_rc__bit_0.
// Constraint expression for cpu/decode/opcode_rc/zero: column0_row0.
// Constraint expression for cpu/decode/opcode_rc_input: column5_row1 - (((column0_row0 * offset_size + column7_row4) * offset_size + column7_row8) * offset_size + column7_row0).
// Constraint expression for cpu/decode/flag_op1_base_op0_bit: cpu__decode__flag_op1_base_op0_0 * cpu__decode__flag_op1_base_op0_0 - cpu__decode__flag_op1_base_op0_0.
// Constraint expression for cpu/decode/flag_res_op1_bit: cpu__decode__flag_res_op1_0 * cpu__decode__flag_res_op1_0 - cpu__decode__flag_res_op1_0.
// Constraint expression for cpu/decode/flag_pc_update_regular_bit: cpu__decode__flag_pc_update_regular_0 * cpu__decode__flag_pc_update_regular_0 - cpu__decode__flag_pc_update_regular_0.
// Constraint expression for cpu/decode/fp_update_regular_bit: cpu__decode__fp_update_regular_0 * cpu__decode__fp_update_regular_0 - cpu__decode__fp_update_regular_0.
// Constraint expression for cpu/operands/mem_dst_addr: column5_row8 + half_offset_size - (cpu__decode__opcode_rc__bit_0 * column7_row11 + (1 - cpu__decode__opcode_rc__bit_0) * column7_row3 + column7_row0).
// Constraint expression for cpu/operands/mem0_addr: column5_row4 + half_offset_size - (cpu__decode__opcode_rc__bit_1 * column7_row11 + (1 - cpu__decode__opcode_rc__bit_1) * column7_row3 + column7_row8).
// Constraint expression for cpu/operands/mem1_addr: column5_row12 + half_offset_size - (cpu__decode__opcode_rc__bit_2 * column5_row0 + cpu__decode__opcode_rc__bit_4 * column7_row3 + cpu__decode__opcode_rc__bit_3 * column7_row11 + cpu__decode__flag_op1_base_op0_0 * column5_row5 + column7_row4).
// Constraint expression for cpu/operands/ops_mul: column7_row7 - column5_row5 * column5_row13.
// Constraint expression for cpu/operands/res: (1 - cpu__decode__opcode_rc__bit_9) * column7_row15 - (cpu__decode__opcode_rc__bit_5 * (column5_row5 + column5_row13) + cpu__decode__opcode_rc__bit_6 * column7_row7 + cpu__decode__flag_res_op1_0 * column5_row13).
// Constraint expression for cpu/update_registers/update_pc/tmp0: column8_row0 - cpu__decode__opcode_rc__bit_9 * column5_row9.
// Constraint expression for cpu/update_registers/update_pc/tmp1: column8_row8 - column8_row0 * column7_row15.
// Constraint expression for cpu/update_registers/update_pc/pc_cond_negative: (1 - cpu__decode__opcode_rc__bit_9) * column5_row16 + column8_row0 * (column5_row16 - (column5_row0 + column5_row13)) - (cpu__decode__flag_pc_update_regular_0 * npc_reg_0 + cpu__decode__opcode_rc__bit_7 * column7_row15 + cpu__decode__opcode_rc__bit_8 * (column5_row0 + column7_row15)).
// Constraint expression for cpu/update_registers/update_pc/pc_cond_positive: (column8_row8 - cpu__decode__opcode_rc__bit_9) * (column5_row16 - npc_reg_0).
// Constraint expression for cpu/update_registers/update_ap/ap_update: column7_row19 - (column7_row3 + cpu__decode__opcode_rc__bit_10 * column7_row15 + cpu__decode__opcode_rc__bit_11 + cpu__decode__opcode_rc__bit_12 * 2).
// Constraint expression for cpu/update_registers/update_fp/fp_update: column7_row27 - (cpu__decode__fp_update_regular_0 * column7_row11 + cpu__decode__opcode_rc__bit_13 * column5_row9 + cpu__decode__opcode_rc__bit_12 * (column7_row3 + 2)).
// Constraint expression for cpu/opcodes/call/push_fp: cpu__decode__opcode_rc__bit_12 * (column5_row9 - column7_row11).
// Constraint expression for cpu/opcodes/call/push_pc: cpu__decode__opcode_rc__bit_12 * (column5_row5 - (column5_row0 + cpu__decode__opcode_rc__bit_2 + 1)).
// Constraint expression for cpu/opcodes/call/off0: cpu__decode__opcode_rc__bit_12 * (column7_row0 - half_offset_size).
// Constraint expression for cpu/opcodes/call/off1: cpu__decode__opcode_rc__bit_12 * (column7_row8 - (half_offset_size + 1)).
// Constraint expression for cpu/opcodes/call/flags: cpu__decode__opcode_rc__bit_12 * (cpu__decode__opcode_rc__bit_12 + cpu__decode__opcode_rc__bit_12 + 1 + 1 - (cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_1 + 4)).
// Constraint expression for cpu/opcodes/ret/off0: cpu__decode__opcode_rc__bit_13 * (column7_row0 + 2 - half_offset_size).
// Constraint expression for cpu/opcodes/ret/off2: cpu__decode__opcode_rc__bit_13 * (column7_row4 + 1 - half_offset_size).
// Constraint expression for cpu/opcodes/ret/flags: cpu__decode__opcode_rc__bit_13 * (cpu__decode__opcode_rc__bit_7 + cpu__decode__opcode_rc__bit_0 + cpu__decode__opcode_rc__bit_3 + cpu__decode__flag_res_op1_0 - 4).
// Constraint expression for cpu/opcodes/assert_eq/assert_eq: cpu__decode__opcode_rc__bit_14 * (column5_row9 - column7_row15).
// Constraint expression for initial_ap: column7_row3 - initial_ap.
// Constraint expression for initial_fp: column7_row11 - initial_ap.
// Constraint expression for initial_pc: column5_row0 - initial_pc.
// Constraint expression for final_ap: column7_row3 - final_ap.
// Constraint expression for final_fp: column7_row11 - initial_ap.
// Constraint expression for final_pc: column5_row0 - final_pc.
// Constraint expression for memory/multi_column_perm/perm/init0: (memory/multi_column_perm/perm/interaction_elm - (column6_row0 + memory/multi_column_perm/hash_interaction_elm0 * column6_row1)) * column9_inter1_row0 + column5_row0 + memory/multi_column_perm/hash_interaction_elm0 * column5_row1 - memory/multi_column_perm/perm/interaction_elm.
// Constraint expression for memory/multi_column_perm/perm/step0: (memory/multi_column_perm/perm/interaction_elm - (column6_row2 + memory/multi_column_perm/hash_interaction_elm0 * column6_row3)) * column9_inter1_row2 - (memory/multi_column_perm/perm/interaction_elm - (column5_row2 + memory/multi_column_perm/hash_interaction_elm0 * column5_row3)) * column9_inter1_row0.
// Constraint expression for memory/multi_column_perm/perm/last: column9_inter1_row0 - memory/multi_column_perm/perm/public_memory_prod.
// Constraint expression for memory/diff_is_bit: memory__address_diff_0 * memory__address_diff_0 - memory__address_diff_0.
// Constraint expression for memory/is_func: (memory__address_diff_0 - 1) * (column6_row1 - column6_row3).
// Constraint expression for memory/initial_addr: column6_row0 - 1.
// Constraint expression for public_memory_addr_zero: column5_row2.
// Constraint expression for public_memory_value_zero: column5_row3.
// Constraint expression for rc16/perm/init0: (rc16/perm/interaction_elm - column7_row2) * column9_inter1_row1 + column7_row0 - rc16/perm/interaction_elm.
// Constraint expression for rc16/perm/step0: (rc16/perm/interaction_elm - column7_row6) * column9_inter1_row5 - (rc16/perm/interaction_elm - column7_row4) * column9_inter1_row1.
// Constraint expression for rc16/perm/last: column9_inter1_row1 - rc16/perm/public_memory_prod.
// Constraint expression for rc16/diff_is_bit: rc16__diff_0 * rc16__diff_0 - rc16__diff_0.
// Constraint expression for rc16/minimum: column7_row2 - rc_min.
// Constraint expression for rc16/maximum: column7_row2 - rc_max.
// Constraint expression for diluted_check/permutation/init0: (diluted_check/permutation/interaction_elm - column7_row5) * column9_inter1_row7 + column7_row1 - diluted_check/permutation/interaction_elm.
// Constraint expression for diluted_check/permutation/step0: (diluted_check/permutation/interaction_elm - column7_row13) * column9_inter1_row15 - (diluted_check/permutation/interaction_elm - column7_row9) * column9_inter1_row7.
// Constraint expression for diluted_check/permutation/last: column9_inter1_row7 - diluted_check/permutation/public_memory_prod.
// Constraint expression for diluted_check/init: column9_inter1_row3 - 1.
// Constraint expression for diluted_check/first_element: column7_row5 - diluted_check/first_elm.
// Constraint expression for diluted_check/step: column9_inter1_row11 - (column9_inter1_row3 * (1 + diluted_check/interaction_z * (column7_row13 - column7_row5)) + diluted_check/interaction_alpha * (column7_row13 - column7_row5) * (column7_row13 - column7_row5)).
// Constraint expression for diluted_check/last: column9_inter1_row3 - diluted_check/final_cum_val.
// Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/last_one_is_zero: column8_row86 * (column3_row0 - (column3_row1 + column3_row1)).
// Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones0: column8_row86 * (column3_row1 - 3138550867693340381917894711603833208051177722232017256448 * column3_row192).
// Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit192: column8_row86 - column4_row255 * (column3_row192 - (column3_row193 + column3_row193)).
// Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones192: column4_row255 * (column3_row193 - 8 * column3_row196).
// Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/cumulative_bit196: column4_row255 - (column3_row251 - (column3_row252 + column3_row252)) * (column3_row196 - (column3_row197 + column3_row197)).
// Constraint expression for pedersen/hash0/ec_subset_sum/bit_unpacking/zeroes_between_ones196: (column3_row251 - (column3_row252 + column3_row252)) * (column3_row197 - 18014398509481984 * column3_row251).
// Constraint expression for pedersen/hash0/ec_subset_sum/booleanity_test: pedersen__hash0__ec_subset_sum__bit_0 * (pedersen__hash0__ec_subset_sum__bit_0 - 1).
// Constraint expression for pedersen/hash0/ec_subset_sum/bit_extraction_end: column3_row0.
// Constraint expression for pedersen/hash0/ec_subset_sum/zeros_tail: column3_row0.
// Constraint expression for pedersen/hash0/ec_subset_sum/add_points/slope: pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 - pedersen__points__y) - column4_row0 * (column1_row0 - pedersen__points__x).
// Constraint expression for pedersen/hash0/ec_subset_sum/add_points/x: column4_row0 * column4_row0 - pedersen__hash0__ec_subset_sum__bit_0 * (column1_row0 + pedersen__points__x + column1_row1).
// Constraint expression for pedersen/hash0/ec_subset_sum/add_points/y: pedersen__hash0__ec_subset_sum__bit_0 * (column2_row0 + column2_row1) - column4_row0 * (column1_row0 - column1_row1).
// Constraint expression for pedersen/hash0/ec_subset_sum/copy_point/x: pedersen__hash0__ec_subset_sum__bit_neg_0 * (column1_row1 - column1_row0).
// Constraint expression for pedersen/hash0/ec_subset_sum/copy_point/y: pedersen__hash0__ec_subset_sum__bit_neg_0 * (column2_row1 - column2_row0).
// Constraint expression for pedersen/hash0/copy_point/x: column1_row256 - column1_row255.
// Constraint expression for pedersen/hash0/copy_point/y: column2_row256 - column2_row255.
// Constraint expression for pedersen/hash0/init/x: column1_row0 - pedersen/shift_point.x.
// Constraint expression for pedersen/hash0/init/y: column2_row0 - pedersen/shift_point.y.
// Constraint expression for pedersen/input0_value0: column5_row7 - column3_row0.
// Constraint expression for pedersen/input0_addr: column5_row518 - (column5_row134 + 1).
// Constraint expression for pedersen/init_addr: column5_row6 - initial_pedersen_addr.
// Constraint expression for pedersen/input1_value0: column5_row263 - column3_row256.
// Constraint expression for pedersen/input1_addr: column5_row262 - (column5_row6 + 1).
// Constraint expression for pedersen/output_value0: column5_row135 - column1_row511.
// Constraint expression for pedersen/output_addr: column5_row134 - (column5_row262 + 1).
// Constraint expression for rc_builtin/value: rc_builtin__value7_0 - column5_row71.
// Constraint expression for rc_builtin/addr_step: column5_row326 - (column5_row70 + 1).
// Constraint expression for rc_builtin/init_addr: column5_row70 - initial_rc_addr.
// Constraint expression for ecdsa/signature0/doubling_key/slope: ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + ecdsa__signature0__doubling_key__x_squared + ecdsa/sig_config.alpha - (column8_row36 + column8_row36) * column8_row50.
// Constraint expression for ecdsa/signature0/doubling_key/x: column8_row50 * column8_row50 - (column8_row4 + column8_row4 + column8_row68).
// Constraint expression for ecdsa/signature0/doubling_key/y: column8_row36 + column8_row100 - column8_row50 * (column8_row4 - column8_row68).
// Constraint expression for ecdsa/signature0/exponentiate_generator/booleanity_test: ecdsa__signature0__exponentiate_generator__bit_0 * (ecdsa__signature0__exponentiate_generator__bit_0 - 1).
// Constraint expression for ecdsa/signature0/exponentiate_generator/bit_extraction_end: column8_row38.
// Constraint expression for ecdsa/signature0/exponentiate_generator/zeros_tail: column8_row38.
// Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/slope: ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row70 - ecdsa__generator_points__y) - column8_row102 * (column8_row6 - ecdsa__generator_points__x).
// Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/x: column8_row102 * column8_row102 - ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row6 + ecdsa__generator_points__x + column8_row134).
// Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/y: ecdsa__signature0__exponentiate_generator__bit_0 * (column8_row70 + column8_row198) - column8_row102 * (column8_row6 - column8_row134).
// Constraint expression for ecdsa/signature0/exponentiate_generator/add_points/x_diff_inv: column8_row22 * (column8_row6 - ecdsa__generator_points__x) - 1.
// Constraint expression for ecdsa/signature0/exponentiate_generator/copy_point/x: ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column8_row134 - column8_row6).
// Constraint expression for ecdsa/signature0/exponentiate_generator/copy_point/y: ecdsa__signature0__exponentiate_generator__bit_neg_0 * (column8_row198 - column8_row70).
// Constraint expression for ecdsa/signature0/exponentiate_key/booleanity_test: ecdsa__signature0__exponentiate_key__bit_0 * (ecdsa__signature0__exponentiate_key__bit_0 - 1).
// Constraint expression for ecdsa/signature0/exponentiate_key/bit_extraction_end: column8_row12.
// Constraint expression for ecdsa/signature0/exponentiate_key/zeros_tail: column8_row12.
// Constraint expression for ecdsa/signature0/exponentiate_key/add_points/slope: ecdsa__signature0__exponentiate_key__bit_0 * (column8_row52 - column8_row36) - column8_row10 * (column8_row20 - column8_row4).
// Constraint expression for ecdsa/signature0/exponentiate_key/add_points/x: column8_row10 * column8_row10 - ecdsa__signature0__exponentiate_key__bit_0 * (column8_row20 + column8_row4 + column8_row84).
// Constraint expression for ecdsa/signature0/exponentiate_key/add_points/y: ecdsa__signature0__exponentiate_key__bit_0 * (column8_row52 + column8_row116) - column8_row10 * (column8_row20 - column8_row84).
// Constraint expression for ecdsa/signature0/exponentiate_key/add_points/x_diff_inv: column8_row42 * (column8_row20 - column8_row4) - 1.
// Constraint expression for ecdsa/signature0/exponentiate_key/copy_point/x: ecdsa__signature0__exponentiate_key__bit_neg_0 * (column8_row84 - column8_row20).
// Constraint expression for ecdsa/signature0/exponentiate_key/copy_point/y: ecdsa__signature0__exponentiate_key__bit_neg_0 * (column8_row116 - column8_row52).
// Constraint expression for ecdsa/signature0/init_gen/x: column8_row6 - ecdsa/sig_config.shift_point.x.
// Constraint expression for ecdsa/signature0/init_gen/y: column8_row70 + ecdsa/sig_config.shift_point.y.
// Constraint expression for ecdsa/signature0/init_key/x: column8_row20 - ecdsa/sig_config.shift_point.x.
// Constraint expression for ecdsa/signature0/init_key/y: column8_row52 - ecdsa/sig_config.shift_point.y.
// Constraint expression for ecdsa/signature0/add_results/slope: column8_row32710 - (column8_row16372 + column8_row32742 * (column8_row32646 - column8_row16340)).
// Constraint expression for ecdsa/signature0/add_results/x: column8_row32742 * column8_row32742 - (column8_row32646 + column8_row16340 + column8_row16388).
// Constraint expression for ecdsa/signature0/add_results/y: column8_row32710 + column8_row16420 - column8_row32742 * (column8_row32646 - column8_row16388).
// Constraint expression for ecdsa/signature0/add_results/x_diff_inv: column8_row32662 * (column8_row32646 - column8_row16340) - 1.
// Constraint expression for ecdsa/signature0/extract_r/slope: column8_row32756 + ecdsa/sig_config.shift_point.y - column8_row16346 * (column8_row32724 - ecdsa/sig_config.shift_point.x).
// Constraint expression for ecdsa/signature0/extract_r/x: column8_row16346 * column8_row16346 - (column8_row32724 + ecdsa/sig_config.shift_point.x + column8_row12).
// Constraint expression for ecdsa/signature0/extract_r/x_diff_inv: column8_row32730 * (column8_row32724 - ecdsa/sig_config.shift_point.x) - 1.
// Constraint expression for ecdsa/signature0/z_nonzero: column8_row38 * column8_row16378 - 1.
// Constraint expression for ecdsa/signature0/r_and_w_nonzero: column8_row12 * column8_row16370 - 1.
// Constraint expression for ecdsa/signature0/q_on_curve/x_squared: column8_row32762 - column8_row4 * column8_row4.
// Constraint expression for ecdsa/signature0/q_on_curve/on_curve: column8_row36 * column8_row36 - (column8_row4 * column8_row32762 + ecdsa/sig_config.alpha * column8_row4 + ecdsa/sig_config.beta).
// Constraint expression for ecdsa/init_addr: column5_row390 - initial_ecdsa_addr.
// Constraint expression for ecdsa/message_addr: column5_row16774 - (column5_row390 + 1).
// Constraint expression for ecdsa/pubkey_addr: column5_row33158 - (column5_row16774 + 1).
// Constraint expression for ecdsa/message_value0: column5_row16775 - column8_row38.
// Constraint expression for ecdsa/pubkey_value0: column5_row391 - column8_row4.
// Constraint expression for bitwise/init_var_pool_addr: column5_row198 - initial_bitwise_addr.
// Constraint expression for bitwise/step_var_pool_addr: column5_row454 - (column5_row198 + 1).
// Constraint expression for bitwise/x_or_y_addr: column5_row902 - (column5_row966 + 1).
// Constraint expression for bitwise/next_var_pool_addr: column5_row1222 - (column5_row902 + 1).
// Constraint expression for bitwise/partition: bitwise__sum_var_0_0 + bitwise__sum_var_8_0 - column5_row199.
// Constraint expression for bitwise/or_is_and_plus_xor: column5_row903 - (column5_row711 + column5_row967).
// Constraint expression for bitwise/addition_is_xor_with_and: column7_row1 + column7_row257 - (column7_row769 + column7_row513 + column7_row513).
// Constraint expression for bitwise/unique_unpacking192: (column7_row705 + column7_row961) * 16 - column7_row9.
// Constraint expression for bitwise/unique_unpacking193: (column7_row721 + column7_row977) * 16 - column7_row521.
// Constraint expression for bitwise/unique_unpacking194: (column7_row737 + column7_row993) * 16 - column7_row265.
// Constraint expression for bitwise/unique_unpacking195: (column7_row753 + column7_row1009) * 256 - column7_row777.
// Constraint expression for ec_op/init_addr: column5_row8582 - initial_ec_op_addr.
// Constraint expression for ec_op/p_x_addr: column5_row24966 - (column5_row8582 + 7).
// Constraint expression for ec_op/p_y_addr: column5_row4486 - (column5_row8582 + 1).
// Constraint expression for ec_op/q_x_addr: column5_row12678 - (column5_row4486 + 1).
// Constraint expression for ec_op/q_y_addr: column5_row2438 - (column5_row12678 + 1).
// Constraint expression for ec_op/m_addr: column5_row10630 - (column5_row2438 + 1).
// Constraint expression for ec_op/r_x_addr: column5_row6534 - (column5_row10630 + 1).
// Constraint expression for ec_op/r_y_addr: column5_row14726 - (column5_row6534 + 1).
// Constraint expression for ec_op/doubling_q/slope: ec_op__doubling_q__x_squared_0 + ec_op__doubling_q__x_squared_0 + ec_op__doubling_q__x_squared_0 + ec_op/curve_config.alpha - (column8_row28 + column8_row28) * column8_row60.
// Constraint expression for ec_op/doubling_q/x: column8_row60 * column8_row60 - (column8_row44 + column8_row44 + column8_row108).
// Constraint expression for ec_op/doubling_q/y: column8_row28 + column8_row92 - column8_row60 * (column8_row44 - column8_row108).
// Constraint expression for ec_op/get_q_x: column5_row12679 - column8_row44.
// Constraint expression for ec_op/get_q_y: column5_row2439 - column8_row28.
// Constraint expression for ec_op/ec_subset_sum/bit_unpacking/last_one_is_zero: column8_row16362 * (column8_row18 - (column8_row82 + column8_row82)).
// Constraint expression for ec_op/ec_subset_sum/bit_unpacking/zeroes_between_ones0: column8_row16362 * (column8_row82 - 3138550867693340381917894711603833208051177722232017256448 * column8_row12306).
// Constraint expression for ec_op/ec_subset_sum/bit_unpacking/cumulative_bit192: column8_row16362 - column8_row16330 * (column8_row12306 - (column8_row12370 + column8_row12370)).
// Constraint expression for ec_op/ec_subset_sum/bit_unpacking/zeroes_between_ones192: column8_row16330 * (column8_row12370 - 8 * column8_row12562).
// Constraint expression for ec_op/ec_subset_sum/bit_unpacking/cumulative_bit196: column8_row16330 - (column8_row16082 - (column8_row16146 + column8_row16146)) * (column8_row12562 - (column8_row12626 + column8_row12626)).
// Constraint expression for ec_op/ec_subset_sum/bit_unpacking/zeroes_between_ones196: (column8_row16082 - (column8_row16146 + column8_row16146)) * (column8_row12626 - 18014398509481984 * column8_row16082).
// Constraint expression for ec_op/ec_subset_sum/booleanity_test: ec_op__ec_subset_sum__bit_0 * (ec_op__ec_subset_sum__bit_0 - 1).
// Constraint expression for ec_op/ec_subset_sum/bit_extraction_end: column8_row18.
// Constraint expression for ec_op/ec_subset_sum/zeros_tail: column8_row18.
// Constraint expression for ec_op/ec_subset_sum/add_points/slope: ec_op__ec_subset_sum__bit_0 * (column8_row34 - column8_row28) - column8_row26 * (column8_row2 - column8_row44).
// Constraint expression for ec_op/ec_subset_sum/add_points/x: column8_row26 * column8_row26 - ec_op__ec_subset_sum__bit_0 * (column8_row2 + column8_row44 + column8_row66).
// Constraint expression for ec_op/ec_subset_sum/add_points/y: ec_op__ec_subset_sum__bit_0 * (column8_row34 + column8_row98) - column8_row26 * (column8_row2 - column8_row66).
// Constraint expression for ec_op/ec_subset_sum/add_points/x_diff_inv: column8_row58 * (column8_row2 - column8_row44) - 1.
// Constraint expression for ec_op/ec_subset_sum/copy_point/x: ec_op__ec_subset_sum__bit_neg_0 * (column8_row66 - column8_row2).
// Constraint expression for ec_op/ec_subset_sum/copy_point/y: ec_op__ec_subset_sum__bit_neg_0 * (column8_row98 - column8_row34).
// Constraint expression for ec_op/get_m: column8_row18 - column5_row10631.
// Constraint expression for ec_op/get_p_x: column5_row8583 - column8_row2.
// Constraint expression for ec_op/get_p_y: column5_row4487 - column8_row34.
// Constraint expression for ec_op/set_r_x: column5_row6535 - column8_row16322.
// Constraint expression for ec_op/set_r_y: column5_row14727 - column8_row16354.